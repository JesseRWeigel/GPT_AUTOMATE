- DELIVERABLE: 1
  Solution:
    - Create a web scraper using Python and BeautifulSoup library to scrape forex prices from various websites
    - Set up a PostgreSQL database to store scraped data
    - Implement a function to insert scraped data into the database
    - Implement a basic prototype for predicting forex prices for the next five days using linear regression
  Dependencies: Python, BeautifulSoup, PostgreSQL
  SharedState: N/A
  AdditionalNotes: N/A
  RUNTIME_INSTRUCTIONS:
    FILENAME: scraper.py
    RELIES_ON: requirements.txt
    IS_LIBRARY: False
    LOCATION: root
    EXECUTION_ORDER: 1
    EXECUTION_COMMAND: python scraper.py
    LANGUAGE: Python
    ENV_VARS: N/A
    LIBRARIES: BeautifulSoup, psycopg2, numpy, pandas, scikit-learn

- DELIVERABLE: 2
  Solution:
    - Implement authentication using Flask-Login library
    - Build a REST API using Flask and Flask-RESTful
    - Add endpoints to get all scraped forex data from the database
    - Add endpoints to post new forex data to the database
  Dependencies: Python, Flask, Flask-Login, Flask-RESTful, PostgreSQL
  SharedState: N/A
  AdditionalNotes: Uses existing database connection and scraper from Deliverable 1
  RUNTIME_INSTRUCTIONS:
    FILENAME: api.py
    RELIES_ON: scraper.py, requirements.txt
    IS_LIBRARY: False
    LOCATION: root
    EXECUTION_ORDER: 2
    EXECUTION_COMMAND: python api.py
    LANGUAGE: Python
    ENV_VARS: N/A
    LIBRARIES: Flask, Flask-Login, Flask-RESTful, psycopg2

- DELIVERABLE: 3
  Solution:
    - Build a frontend using React and React-Bootstrap
    - Implement a dashboard to display scraped forex data
    - Populate the dashboard with data retrieved from the REST API
    - Add user authentication using auth0
  Dependencies: Node.js, React, React-Bootstrap, auth0
  SharedState: N/A
  AdditionalNotes: Uses existing authentication and API from Deliverable 2
  RUNTIME_INSTRUCTIONS:
    FILENAME: dashboard.js
    RELIES_ON: package.json, api.py
    IS_LIBRARY: False
    LOCATION: frontend
    EXECUTION_ORDER: 3
    EXECUTION_COMMAND: npm start
    LANGUAGE: JavaScript
    ENV_VARS: N/A
    LIBRARIES: React, React-Bootstrap

- DELIVERABLE: 4
  Solution:
    - Implement a basic prototype for predicting forex prices for the next five days using linear regression and data retrieved from the REST API
    - Add chart displays to the dashboard to show predicted forex prices
  Dependencies: Python, Flask, Flask-RESTful, PostgreSQL, React, React-Bootstrap
  SharedState: N/A
  AdditionalNotes: Uses existing REST API from Deliverable 2
  RUNTIME_INSTRUCTIONS:
    FILENAME: prediction.py
    RELIES_ON: api.py, requirements.txt
    IS_LIBRARY: True
    LOCATION: root
    EXECUTION_ORDER: 4
    EXECUTION_COMMAND: N/A
    LANGUAGE: Python
    ENV_VARS: N/A
    LIBRARIES: Flask, Flask-RESTful, psycopg2, numpy, pandas, scikit-learn

- DELIVERABLE: 5
  Solution:
    - Add functionality to download forex data as CSV files
    - Add functionality to download predicted forex prices as CSV files
  Dependencies: Python, Flask, Flask-RESTful, PostgreSQL, React, React-Bootstrap
  SharedState: N/A
  AdditionalNotes: Uses existing REST API from Deliverable 2
  RUNTIME_INSTRUCTIONS:
    FILENAME: downloads.js
    RELIES_ON: api.py, prediction.py
    IS_LIBRARY: True
    LOCATION: frontend
    EXECUTION_ORDER: 5
    EXECUTION_COMMAND: N/A
    LANGUAGE: JavaScript
    ENV_VARS: N/A
    LIBRARIES: React, React-Bootstrap

