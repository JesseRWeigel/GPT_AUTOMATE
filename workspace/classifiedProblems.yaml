- DELIVERABLE: 1
  Solution:
    - Use Python to create scripts for scraping forex prices from various sources
    - Create a MongoDB database and collection to store the scraped forex prices
    - Write functions to retrieve and store the scraped forex prices in the database
    - Implement a basic prediction algorithm using historical data to predict next prices for the next five days
    - Create a basic API endpoint to retrieve the predicted prices
  Dependencies: Python, MongoDB
  SharedState: N/A
  AdditionalNotes: N/A
  RUNTIME_INSTRUCTIONS:
    FILENAME: forex_scraper.py
    RELIES_ON: pymongo, requests, bs4
    IS_LIBRARY: False
    LOCATION: root
    EXECUTION_ORDER: 1
    EXECUTION_COMMAND: python forex_scraper.py
    LANGUAGE: Python
    ENV_VARS: N/A
    LIBRARIES: pymongo, requests, bs4

- DELIVERABLE: 2
  Solution:
    - Create a frontend using React to display the scraped forex prices from the API endpoint
    - Implement pagination and search functionality to filter and limit the number of displayed prices
    - Integrate charting libraries to display graphs/chart of historical and predicted forex prices 
  Dependencies: React
  SharedState: N/A
  AdditionalNotes: Uses existing API endpoint from Deliverable 1
  RUNTIME_INSTRUCTIONS:
    FILENAME: forex_display.js
    RELIES_ON: axios, react-chartjs-2, react-redux
    IS_LIBRARY: True
    LOCATION: root
    EXECUTION_ORDER: 2
    EXECUTION_COMMAND: N/A
    LANGUAGE: JavaScript
    ENV_VARS: N/A
    LIBRARIES: axios, react-chartjs-2, react-redux

- DELIVERABLE: 3
  Solution:
    - Implement a user authentication system using Passport.js to allow registered users to save stocks and forex prices to their portfolio
    - Write additional functions to manage user portfolio data in the database
    - Add functionality for displaying user portfolio data
  Dependencies: MongoDB, Node.js, Express, React
  SharedState: Passport.js
  AdditionalNotes: 
  RUNTIME_INSTRUCTIONS:
    FILENAME: user_authentication.js
    RELIES_ON: passport, express-session, connect-mongo
    IS_LIBRARY: True
    LOCATION: root
    EXECUTION_ORDER: 3
    EXECUTION_COMMAND: N/A
    LANGUAGE: JavaScript
    ENV_VARS: N/A
    LIBRARIES: passport, express-session, connect-mongo

- DELIVERABLE: 4
  Solution:
    - Build a feature to allow users to compare and analyze different forex pairs
    - Integrate third-party charting libraries to compare and graph forex pair data
  Dependencies: React
  SharedState: N/A
  AdditionalNotes: Uses existing API endpoint from Deliverable 1
  RUNTIME_INSTRUCTIONS:
    FILENAME: compare_forex_pairs.js
    RELIES_ON: chart.js, axios
    IS_LIBRARY: True
    LOCATION: root
    EXECUTION_ORDER: 4
    EXECUTION_COMMAND: N/A
    LANGUAGE: JavaScript
    ENV_VARS: N/A
    LIBRARIES: chart.js, axios

